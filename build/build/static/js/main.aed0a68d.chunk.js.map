{"version":3,"sources":["serviceWorker.js","redux/sampReducer.js","redux/store.js","redux/constants.js","components/login.jsx","redux/action.js","components/chat.jsx","index.js","logo.svg"],"names":["Boolean","window","location","hostname","match","initialState","username","isLogin","composeEnhancer","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","combineReducers","sampReducer","state","action","type","newstate","payload","credentials","password","toLowerCase","applyMiddleware","thunk","login","props","loginSubmit","e","preventDefault","loginAction","messageOnChange","name","target","message","value","setState","Container","Row","Col","TextField","id","this","onChange","label","autoComplete","Button","variant","color","onClick","Component","connect","dispatch","a","console","log","socket","io","lipClassNames","useDefaultLipClassNames","chat","messageSubmitted","emit","renderChat","chatList","map","item","index","key","style","backgroundColor","borderRadius","fontFamily","paddingLeft","paddingBottom","getChat","on","renderButton","disabled","md","multiline","rowsMax","fullWidth","width","maxHeight","overflow","wordWrap","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","module","exports"],"mappings":"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","file":"static/js/main.aed0a68d.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { CREATE, UPDATE, LOGIN } from \"./constants\";\r\n\r\nconst initialState = {\r\n  username: \"\",\r\n  isLogin: false,\r\n};\r\n\r\nexport default function sampReducer(state = initialState, action) {\r\n  if (action.type == CREATE) {\r\n    // console.log(\"sampReducer called...\");\r\n    // // let newState = [\r\n    // //   ...state,\r\n    // //   {\r\n    // //     id: ++latestId,\r\n    // //     description: action.payload.description,\r\n    // //     action: \"created\",\r\n    // //   },\r\n    // // ];\r\n    // console.log(action.payload);\r\n    // return ++latestId;\r\n  } else if (action.type == LOGIN) {\r\n    let newstate = {};\r\n    if (action.payload.credentials.password.toLowerCase() == \"password\") {\r\n      newstate = {\r\n        ...state,\r\n        username: action.payload.credentials.username,\r\n        isLogin: true,\r\n      };\r\n    }\r\n    return newstate;\r\n  } else {\r\n    return state;\r\n  }\r\n}\r\n","import { createStore, applyMiddleware, compose, combineReducers } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport sampReducer from \"./sampReducer\";\r\n\r\nconst initialState = {};\r\nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst store = createStore(\r\n  combineReducers({ sampReducer: sampReducer }),\r\n  initialState,\r\n  composeEnhancer(applyMiddleware(thunk))\r\n);\r\n\r\nexport default store;\r\n","export const CREATE = \"CREATE\";\r\nexport const UPDATE = \"UPDATE\";\r\nexport const LOGIN = \"LOGIN\";\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { loginAction } from \"../redux/action\";\r\nimport { TextField, Button } from \"@material-ui/core\";\r\nimport { Col, Container, Row } from \"react-bootstrap\";\r\n\r\nclass login extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      username: \"\",\r\n      password: \"\",\r\n    };\r\n  }\r\n\r\n  loginSubmit = (e) => {\r\n    e.preventDefault();\r\n    this.props.loginAction(this.state.username);\r\n  };\r\n\r\n  messageOnChange = (e) => {\r\n    let name = e.target.name;\r\n    let message = e.target.value;\r\n    this.setState({ [name]: message });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Container>\r\n        <Row>\r\n          <Col>\r\n            <TextField\r\n              id=\"txt\"\r\n              name=\"username\"\r\n              value={this.state.username}\r\n              onChange={this.messageOnChange}\r\n              label=\"user name\"\r\n            />\r\n          </Col>\r\n          <Col>\r\n            <TextField\r\n              type=\"password\"\r\n              id=\"pwd\"\r\n              name=\"password\"\r\n              autoComplete=\"current-password\"\r\n              value={this.state.password}\r\n              onChange={this.messageOnChange}\r\n              label=\"password\"\r\n            />\r\n          </Col>\r\n          {/* <button onClick={() => this.props.loginAction(this.state.username)}>\r\n          {\" \"}\r\n          click\r\n        </button> */}\r\n          <Col>\r\n            <Button\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              onClick={() =>\r\n                this.props.loginAction({\r\n                  username: this.state.username,\r\n                  password: this.state.password,\r\n                })\r\n              }\r\n            >\r\n              Login\r\n            </Button>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\n//export default login;\r\nconst mapStateToProps = (state) => ({ username: state.username });\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    loginAction: (credentials) => dispatch(loginAction(credentials)),\r\n  };\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(login);\r\n","import store from \"./store\";\r\nimport { CREATE, UPDATE, LOGIN } from \"./constants\";\r\n\r\n// store.subscribe(() => {\r\n//   console.log(\"subscribed\", store.getState());\r\n// });\r\n\r\n// store.dispatch({\r\n//   type: CREATE,\r\n//   payload: {\r\n//     description: \"ready to add\",\r\n//   },\r\n// });\r\n\r\nexport const fetchChat = () => async (dispatch) => {\r\n  dispatch({\r\n    type: CREATE,\r\n    payload: {\r\n      description: \"ready to add\",\r\n    },\r\n  });\r\n};\r\n\r\nexport const loginAction = (credentials) => async (dispatch) => {\r\n  console.log(\"credentials:-\", credentials);\r\n  dispatch({\r\n    type: LOGIN,\r\n    payload: {\r\n      credentials,\r\n    },\r\n  });\r\n};\r\n\r\n// console.log(store.getState());\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { fetchChat } from \"../redux/action\";\r\nimport io from \"socket.io-client\";\r\nimport Login from \"./login\";\r\nimport { Col, Container, Row } from \"react-bootstrap\";\r\nimport { TextField, Button, classes } from \"@material-ui/core\";\r\nimport ScrollableBox, { useDefaultLipClassNames } from \"react-scrollable-box\";\r\nimport \"react-scrollable-box/lib/default.css\";\r\n\r\n// const url = \"http://localhost:8080/\";\r\n//const url = \"https://chat-room-api.herokuapp.com/\";\r\nconst url = \"https://chatroom-api.vercel.app\"\r\nconst socket = io.connect(url);\r\nconst lipClassNames = useDefaultLipClassNames();\r\nclass chat extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      message: \"\",\r\n      username: \"\",\r\n      chatList: [],\r\n    };\r\n  }\r\n\r\n  messageSubmitted = (e) => {\r\n    e.preventDefault();\r\n    const { message } = this.state;\r\n    const username = this.props.username;\r\n    socket.emit(\"message\", { username, message });\r\n    this.setState({ message: \"\" });\r\n    console.log(\"clicked\");\r\n  };\r\n\r\n  messageOnChange = (e) => {\r\n    let name = e.target.name;\r\n    let message = e.target.value;\r\n    this.setState({ [name]: message });\r\n  };\r\n\r\n  renderChat = () => {\r\n    return this.props.isLogin\r\n      ? this.state.chatList.map((item, index) => (\r\n        <div key={index}>\r\n          <div\r\n            style={{\r\n              backgroundColor:\r\n                this.props.username == item.username ? \"#99c6a3\" : \"#c1cef1\",\r\n              borderRadius: \"5px\",\r\n              fontFamily: \"Finger Paint\",\r\n            }}\r\n          >\r\n            <br />\r\n            <b>\r\n              <i style={{ paddingLeft: \"5px\" }}>{item.username}</i>\r\n            </b>\r\n            : <span>{item.message}</span>\r\n          </div>\r\n          <div style={{ paddingBottom: \"2px\" }}></div>\r\n        </div>\r\n      ))\r\n      : null;\r\n  };\r\n\r\n  getChat = () => {\r\n    socket.on(\"message\", ({ username, message }) => {\r\n      this.setState({\r\n        chatList: [{ username, message }, ...this.state.chatList],\r\n      });\r\n      console.log(this.state.chatList);\r\n    });\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.getChat();\r\n  }\r\n  renderButton = () => {\r\n    return this.props.isLogin ? (\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        onClick={this.messageSubmitted}\r\n      >\r\n        Send\r\n      </Button>\r\n    ) : (\r\n      <Button variant=\"contained\" disabled>\r\n        Send\r\n      </Button>\r\n    );\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Container>\r\n          <Row>\r\n            <Col md={4}>\r\n              <br />\r\n              <Row>\r\n                <h3 style={{ fontFamily: \"Finger Paint\" }}>\r\n                  Chat Room<span style={{ color: \"#1cc822\" }}>.</span>\r\n                  <span style={{ color: \"orange\" }}>.</span>\r\n                  <span style={{ color: \"red\" }}>.</span>\r\n                </h3>\r\n              </Row>\r\n              <br />\r\n              <Row>\r\n                <Login />\r\n              </Row>\r\n              <br />\r\n              <Row>\r\n                {/* <Col>\r\n                  <TextField\r\n                    type=\"text\"\r\n                    id=\"txt\"\r\n                    name=\"username\"\r\n                    value={this.props.username}\r\n                    onChange={this.messageOnChange}\r\n                    label=\"user\"\r\n                    disabled\r\n                  />\r\n                </Col> */}\r\n                <Col>\r\n                  <TextField\r\n                    type=\"text\"\r\n                    multiline\r\n                    rowsMax={10}\r\n                    id=\"txt\"\r\n                    name=\"message\"\r\n                    value={this.state.message}\r\n                    onChange={this.messageOnChange}\r\n                    label=\"Message\"\r\n                    fullWidth\r\n                    variant=\"outlined\"\r\n                    style={{ width: \"226px\" }}\r\n                  />\r\n                </Col>\r\n                {/* <button> Send</button> */}\r\n                <Col>{this.renderButton()}</Col>\r\n              </Row>\r\n            </Col>\r\n\r\n            <Col md={4}>\r\n              <br />\r\n              <br />\r\n              <ScrollableBox\r\n                {...lipClassNames}\r\n                style={{ maxHeight: \"600px\", overflow: \"auto\" }}\r\n              >\r\n                <div style={{ wordWrap: \"break-word\" }}>\r\n                  {this.renderChat()}\r\n                </div>\r\n              </ScrollableBox>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n//export default chat;\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    username: state.sampReducer.username,\r\n    isLogin: state.sampReducer.isLogin,\r\n  };\r\n};\r\n// const mapDispatchToProps = (dispatch) => {\r\n//   return {\r\n//     fetchChat: () => dispatch(fetchChat()),\r\n//   };\r\n// };\r\nexport default connect(mapStateToProps)(chat);\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\nimport Chat from \"./components/chat\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      {/* <App /> */}\n      <Chat />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}